C51 COMPILER V9.55   MAIN                                                                  07/10/2016 14:50:34 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "STC12C5A60S2.h"
   2          #include "intrins.h" 
   3          #include "stdio.h"
   4          #include"uart.h"
   5          
   6          #define uchar unsigned char
   7          #define uint unsigned int
   8          
   9          sbit OUT1   =  P4^2;    //输出IO口1，    R1电磁锁
  10          sbit OUT2   =  P1^0;      //输出2，        R2电磁锁
  11          sbit OUT3   =  P1^1;    //输出3，        R3电磁锁
  12          sbit OUT4   =  P1^2;        //输出4，        R4电磁锁
  13          sbit OUT5   =  P1^3;      //输出5，        R5电磁锁
  14          sbit OUT6   =  P1^4;    //输出6，        激光发射1
  15          sbit OUT7   =  P1^5;    //输出7，        激光发射2
  16          sbit OUT8   =  P1^6;    //输出8，        报警灯1
  17          sbit OUT9   =  P1^7;    //输出9，        报警灯2
  18          sbit OUT10  =  P4^3;    //输出10，       报警灯3
  19          sbit OUT11  =  P3^2;      //输出11，
  20          sbit OUT12  =  P3^3;      //输出12，
  21          
  22          
  23          sbit M10     =  P2^6;    //电缸1+         单片机输出信号告诉电话响铃！蓝色线
  24          sbit M11     =  P2^7;    //电缸1-
  25          sbit M20     =  P3^4;    //电缸2+
  26          sbit M21     =  P3^5;    //电缸2-
  27          sbit M30     =  P3^6;    //电缸3+
  28          sbit M31     =  P3^7;    //电缸3-
  29          
  30          sbit OUT21   =  P4^0;   //输出IO控制口21
  31          sbit OUT22   =  P2^0;     //输出22
  32          sbit OUT23   =  P2^1;   //输出23
  33          sbit OUT24   =  P2^2;       //输出24
  34          sbit OUT25   =  P2^3;     //输出25
  35          sbit OUT26   =  P2^4;   //输出26
  36          sbit OUT27   =  P2^5;   //输出27
  37          //sbit OUT28   =  P2^6;     电缸控制口复用
  38          //sbit OUT29   =  P2^7;   电缸控制口复用
  39          
  40          sbit INPUT16   =  P4^4;   //输入IO控制口16，   告诉单片机打开R5的门！  红色线！
  41          sbit INPUT15   =  P4^5;     //输入15，           R1电磁锁反馈输入
  42          sbit INPUT14   =  P4^1;   //输入14       R2电磁锁反馈输入
  43          sbit INPUT13   =  P4^6;     //输入13       R3电磁锁反馈输入
  44          sbit INPUT12   =  P0^7;     //输入12       激光接收1
  45          sbit INPUT11   =  P0^6;   //输入11，按键类型   激光接收2
  46          
  47          sbit INPUT10   =  P0^5;   //输入10，门禁类型   R1门禁
  48          sbit INPUT9    =  P0^4;   //输入9，门禁    R2门禁
  49          sbit INPUT8    =  P0^3;   //输入8，门禁    R3门禁
  50          sbit INPUT7    =  P0^2;   //输入7，门禁    R4门禁
  51          sbit INPUT6    =  P0^1;   //输入6，门禁    激光接收1
  52          sbit INPUT5    =  P0^0;     //输入5，门禁类型  激光接收2
  53          
  54          sbit RXD   =  P3^0;     
  55          sbit TXD   =  P3^1;
C51 COMPILER V9.55   MAIN                                                                  07/10/2016 14:50:34 PAGE 2   

  56          
  57          #define uchar unsigned char
  58          #define uint unsigned int
  59          
  60          sfr P4sw=0xbb;
  61          
  62          void sys_init(void);
  63          void delay_ms(int count);
  64          void mp3_init();
  65          void mp3(unsigned char comd);
  66          
  67          unsigned char Game_Start=0,door1=0,door2=0,door3=0,step_flag1=0,step_3door=0;
  68          unsigned char flag_d1=0,flag_d2=0,flag_d3=0;
  69          
  70          
  71          
  72          /************************************************************************
  73              函数名称：   void main(void)    
  74              函数功能：   
  75              调用函数：  void delay(unsigned int loop_time)  
  76          *************************************************************************/
  77          void main()
  78          {
  79   1        sys_init();         
  80   1        P4sw = 0x70;       //设置P4口部分特殊引脚为普通IO口
  81   1        Game_Start=0;
  82   1        delay_ms(8000);        //延时一段时间，开启背景音乐
  83   1        delay_ms(8000);
  84   1        delay_ms(8000);
  85   1        delay_ms(8000);
  86   1          mp3(0X33);
  87   1        mp3(0x01);          //音效代入，背景音乐起
  88   1        delay_ms(5000);
  89   1        flag_d1=0,flag_d2=0,flag_d3=0;
  90   1        while(1)
  91   1          {         
  92   2          if((INPUT15==0)&&(flag_d1==0))      //铁门1电磁锁有反馈，发出监狱关门的音效，音效2
  93   2          {
  94   3            delay_ms(50);
  95   3            if((INPUT15==0)&&(flag_d1==0)) 
  96   3            {
  97   4              mp3(0X33);
  98   4              mp3(0x02);
  99   4              flag_d1=1;
 100   4            delay_ms(2000);
 101   4            }
 102   3          }
 103   2              if((INPUT14==0)&&(flag_d2==0))      //铁门2电磁锁有反馈，发出监狱关门的音效，音效2
 104   2          {
 105   3            delay_ms(50);
 106   3            if((INPUT14==0)&&(flag_d2==0)) 
 107   3            {
 108   4               mp3(0X33);
 109   4            mp3(0x02);
 110   4              flag_d2=1;
 111   4            delay_ms(2000);
 112   4            }
 113   3          }
 114   2          if((INPUT13==0)&&(flag_d3==0))      //铁门3电磁锁有反馈，发出监狱关门的音效，音效2
 115   2          {
 116   3            delay_ms(50);
 117   3            if((INPUT13==0)&&(flag_d3==0)) 
C51 COMPILER V9.55   MAIN                                                                  07/10/2016 14:50:34 PAGE 3   

 118   3            {
 119   4              mp3(0X33);
 120   4            mp3(0x02);
 121   4              flag_d3=1;
 122   4            delay_ms(2000);
 123   4            }
 124   3          }
 125   2       
 126   2          if((flag_d3==1)&&(flag_d2==1)&&(flag_d1==1)&&(Game_Start==0))  //三个电磁锁都处于关闭状态时 
 127   2          {                                 
 128   3            delay_ms(50);
 129   3            if((INPUT15==0)&&(INPUT14==0)&&(INPUT13==0))
 130   3            {   
 131   4            
 132   4            Game_Start=1;                          //游戏开始的flag
 133   4            delay_ms(4000); 
 134   4            OUT6=1;                               //打开激光
 135   4            
 136   4            mp3(0x03);                          //音效3，激光启动声
 137   4            delay_ms(2000);
 138   4            mp3(0x04);                          //音效4，监狱嘈杂的声音，单次播放
 139   4            delay_ms(8000);
 140   4            delay_ms(8000);
 141   4            delay_ms(8000);
 142   4            delay_ms(8000);
 143   4            delay_ms(8000);
 144   4      
 145   4              mp3(0X33);
 146   4              mp3(0x07);                   //背景声音，紧张氛围
 147   4      
 148   4            }
 149   3          }   
 150   2      
 151   2          if(INPUT10==0)                   //R1门禁密码输入正确，开R1的电磁锁
 152   2          {
 153   3            delay_ms(50);
 154   3            if(INPUT10==0)
 155   3            {
 156   4              OUT1=0;                   //开R1的门，打开房间1报警灯
 157   4            OUT8=1;
 158   4            door1=1;
 159   4            }
 160   3          }
 161   2      
 162   2          if(INPUT9==0)                     //R2门禁密码输入正确，开R2的锁
 163   2          {
 164   3            delay_ms(50);
 165   3            if(INPUT9==0)
 166   3            {
 167   4              OUT2=0;                      //开R2的门，开房间2报警灯
 168   4            OUT9=1;
 169   4            door2=1;
 170   4            }
 171   3          }
 172   2          if(INPUT8==0)                    //R3门禁密码输入正确，开R3的锁
 173   2          {
 174   3            delay_ms(50);
 175   3            if(INPUT8==0)
 176   3            {
 177   4              OUT3=0;                       //开R3的门，开房间3报警灯
 178   4            OUT10=1;
 179   4            door3=1;
C51 COMPILER V9.55   MAIN                                                                  07/10/2016 14:50:34 PAGE 4   

 180   4            }
 181   3          }
 182   2      
 183   2          if((door1==1)&&(door2==1)&&(door3==1)&&(step_flag1==0)&&(step_3door == 0))
 184   2          {
 185   3           delay_ms(5000);
 186   3           delay_ms(5000);  
 187   3           mp3(0x08);                         //三个门全开时，神秘人语音出现，指示玩家下一步的动作  
 188   3           delay_ms(5000);  
 189   3            step_3door = 1;
 190   3      //     OUT1=1;
 191   3      //     OUT2=1;
 192   3      //     OUT3=1;
 193   3      //     door1=0;
 194   3      //     door2=0;
 195   3      //     door3=0; 
 196   3           delay_ms(8000);
 197   3           delay_ms(8000);
 198   3           delay_ms(5000);
 199   3           mp3(0x09);                         //秒表声 思考时间
 200   3           delay_ms(5000);
 201   3           delay_ms(2000);
 202   3           mp3(0x0A);                          //神秘人语音第2段
 203   3           delay_ms(8000);
 204   3           delay_ms(8000);
 205   3           delay_ms(8000);
 206   3            mp3(0X33);
 207   3            mp3(0x0B);                      //R4门开启前的紧张音效
 208   3            delay_ms(3000);
 209   3          }  
 210   2      
 211   2           if(((INPUT11 == 1) && (INPUT12 == 1 )) && (step_3door == 1))
 212   2           {
 213   3             OUT7=1;     
 214   3           }
 215   2           else
 216   2           {
 217   3              OUT7 = 0;
 218   3           }
 219   2      //     if(((INPUT11==0)&&(INPUT12==0))||(step_3door == 0))      //2个激光接收都不接收
 220   2      //     {
 221   2      //        OUT7=0;                             //R4的门禁断电！
 222   2      //     }
 223   2      //     else                   //2个激光有一个可以接收到
 224   2      //     {
 225   2      //        OUT7=1;                             //R4的门禁通电！
 226   2      //     }
 227   2      
 228   2      
 229   2           if(INPUT7==0)                      //R4门禁密码输入正确，开R4的锁
 230   2          {
 231   3            delay_ms(50);
 232   3            if(INPUT7==0)
 233   3            {
 234   4              step_flag1=1;
 235   4            
 236   4            OUT4=0;                        //开R4的门
 237   4            OUT6=0;                            //关闭激光1   
 238   4      
 239   4            OUT8=0;                      //关闭3个报警灯
 240   4              OUT9=0;
 241   4              OUT10=0;
C51 COMPILER V9.55   MAIN                                                                  07/10/2016 14:50:34 PAGE 5   

 242   4             mp3(0X33);
 243   4            mp3(0x0C);                      // 音效12，R4门开启后短暂音效
 244   4            delay_ms(5000);
 245   4            delay_ms(5000);
 246   4            M10=0;                            // 延时一段时间后告诉电话开始响铃  
 247   4            delay_ms(500);
 248   4            M10=1;
 249   4          
 250   4            mp3(0X33);
 251   4            mp3(0x0D);                      // 音效13，神秘紧张氛围音效，循环播放，直至打开R5的门
 252   4             
 253   4            }
 254   3          }
 255   2          
 256   2      
 257   2          if(INPUT16==0)          //电话端传来开门信号，INPUT16接地
 258   2          {
 259   3            delay_ms(100);
 260   3            if(INPUT16==0)
 261   3            {
 262   4              delay_ms(2000);       
 263   4            OUT5=0;                    //打开R5的门
 264   4            delay_ms(8000);
 265   4            delay_ms(8000);
 266   4            delay_ms(8000);
 267   4             mp3(0x33);                 //放置一段代入语音
 268   4             mp3(0X0E);                                                                                             
             -                                                                                                                        
             -                                                                                                                        
             -                     
 269   4            delay_ms(8000);
 270   4            delay_ms(8000);
 271   4            delay_ms(2000);   
 272   4      
 273   4            while(1)
 274   4            {
 275   5             mp3(0X32);            //降低此时的音量
 276   5             mp3(0X33);
 277   5             mp3(0x02);            // 音效12，R5门开启后短暂音效，关闭音响 
 278   5             delay_ms(6000);
 279   5             ES=0;
 280   5            } 
 281   4             
 282   4            }
 283   3          } 
 284   2                  
 285   2          }                                       
 286   1      }
 287          
 288          /*********************************************************/
 289          /*                                                       */
 290          /* 系统初始化函数                                        */
 291          /*                                                       */
 292          /*********************************************************/                                             
 293          void sys_init()
 294          {
 295   1        P0M1=0X00;
 296   1        P0M0=0Xff;      //设置P0为推挽输出
 297   1        
 298   1        P1M1=0X00;
 299   1        P1M0=0XFF;      //设置P1为推挽输出
 300   1        
C51 COMPILER V9.55   MAIN                                                                  07/10/2016 14:50:34 PAGE 6   

 301   1        P2M1=0X00;
 302   1        P2M0=0XFF;    //设置P2口为推挽输出
 303   1        
 304   1        P3M1=0X00;
 305   1        P3M0=0XFC;      //设置P3为推挽输出  P3.0 3.1 RXD TXD设置为普通IO口 防止音响的异响
 306   1      
 307   1        P4M1=0X00;
 308   1        P4M0=0XFF;      //设置P4为推挽输出
 309   1        
 310   1          
 311   1        //R1-R5所有电磁锁吸合，初始状态
 312   1        OUT1=1;
 313   1        OUT2=1;
 314   1        OUT3=1;
 315   1        OUT4=1;
 316   1        OUT5=1;
 317   1      
 318   1      
 319   1        OUT6=0;   //  激光关闭
 320   1        OUT7=1;   //  R4门禁供电状态（初始）
 321   1        OUT8=0;   //  报警灯1关闭
 322   1        OUT9=0;   //  报警灯2关闭
 323   1        OUT10=0;  //  报警灯3关闭
 324   1      
 325   1        
 326   1        M10=1;    //告诉电话响铃，初始为高电平，触发后为低电平
 327   1        INPUT16=1;  //输入,接地时电话告诉单片机打开R5的门
 328   1      
 329   1        INPUT15=1;  //电磁锁1反馈，输入检测，先写1
 330   1        INPUT14=1; 
 331   1        INPUT13=1; 
 332   1      
 333   1        INPUT11=1;  //激光接收管
 334   1        INPUT12=1;
 335   1      
 336   1        INPUT10=1;
 337   1        INPUT9=1;
 338   1        INPUT8=1;
 339   1        INPUT7=1;
 340   1        INPUT6=1;
 341   1        INPUT5=1;
 342   1            
 343   1        uart_init();               //串口初始化 
 344   1        mp3_init();                //MP3初始化  */
 345   1      
 346   1      }
 347          
 348          
 349          /*********************************************************/
 350          /*                                                       */
 351          /* 1ms延时程序                                           */
 352          /*                                                       */
 353          /*********************************************************/
 354          void delay_ms(int count)  // /* X1ms */  延时1ms程序
 355          {
 356   1              int i,j;
 357   1              for(i=0;i<count;i++)
 358   1                      for(j=0;j<1000;j++);
 359   1      } 
 360          
 361          
 362          
C51 COMPILER V9.55   MAIN                                                                  07/10/2016 14:50:34 PAGE 7   

 363          /*********************************************************/
 364          /*                                                       */
 365          /* MP3操作指令                                           */
 366          /*                                                       */
 367          /*********************************************************/
 368          void mp3(unsigned char comd)
 369          {
 370   1        switch(comd)
 371   1          {
 372   2            
 373   2            case 0X01: send(0X7E);//指令开始位
 374   2                 send(0X04);//说明指令长度
 375   2                 send(0X42);//指定文件夹播放
 376   2                 send(0X01);//定位到名称为“01”的文件夹
 377   2                 send(0x01);//播放第1个音频文件
 378   2                 send(0XEF);//指令结束位 
 379   2                     break;
 380   2          case 0X02: send(0X7E);//指令开始位
 381   2                 send(0X04);//说明指令长度
 382   2                 send(0X42);//指定文件夹播放
 383   2                 send(0X01);//定位到名称为“01”的文件夹
 384   2                 send(0x02);//播放第2个音频文件
 385   2                 send(0XEF);//指令结束位 
 386   2                     break;
 387   2            case 0X03: send(0X7E);//指令开始位
 388   2                 send(0X04);//说明指令长度
 389   2                 send(0X42);//指定文件夹播放
 390   2                 send(0X01);//定位到名称为“01”的文件夹
 391   2                 send(0x03);//播放第3个音频文件
 392   2                 send(0XEF);//指令结束位 
 393   2                     break;
 394   2          case 0X04: send(0X7E);//指令开始位
 395   2                 send(0X04);//说明指令长度
 396   2                 send(0X42);//指定文件夹播放
 397   2                 send(0X01);//定位到名称为“01”的文件夹
 398   2                 send(0x04);//播放第4个音频文件
 399   2                 send(0XEF);//指令结束位 
 400   2                     break;
 401   2          case 0X05: send(0X7E);//指令开始位
 402   2                 send(0X04);//说明指令长度
 403   2                 send(0X42);//指定文件夹播放
 404   2                 send(0X01);//定位到名称为“01”的文件夹
 405   2                 send(0x05);//播放第5个音频文件
 406   2                 send(0XEF);//指令结束位 
 407   2                     break;
 408   2            case 0X06: send(0X7E);//指令开始位
 409   2                 send(0X04);//说明指令长度
 410   2                 send(0X42);//指定文件夹播放
 411   2                 send(0X01);//定位到名称为“01”的文件夹
 412   2                 send(0x06);//播放第6个音频文件
 413   2                 send(0XEF);//指令结束位 
 414   2                     break;
 415   2          case 0X07: send(0X7E);//指令开始位
 416   2                 send(0X04);//说明指令长度
 417   2                 send(0X42);//指定文件夹播放
 418   2                 send(0X01);//定位到名称为“01”的文件夹
 419   2                 send(0x07);//播放第7个音频文件
 420   2                 send(0XEF);//指令结束位 
 421   2                     break;
 422   2          case 0X08: send(0X7E);//指令开始位
 423   2                 send(0X04);//说明指令长度
 424   2                 send(0X42);//指定文件夹播放
C51 COMPILER V9.55   MAIN                                                                  07/10/2016 14:50:34 PAGE 8   

 425   2                 send(0X01);//定位到名称为“01”的文件夹
 426   2                 send(0x08);//播放第8个音频文件
 427   2                 send(0XEF);//指令结束位 
 428   2                     break;
 429   2            case 0X09: send(0X7E);//指令开始位
 430   2                 send(0X04);//说明指令长度
 431   2                 send(0X42);//指定文件夹播放
 432   2                 send(0X01);//定位到名称为“01”的文件夹
 433   2                 send(0x09);//播放第9个音频文件
 434   2                 send(0XEF);//指令结束位 
 435   2                     break;
 436   2          case 0X0A: send(0X7E);//指令开始位
 437   2                 send(0X04);//说明指令长度
 438   2                 send(0X42);//指定文件夹播放
 439   2                 send(0X01);//定位到名称为“01”的文件夹
 440   2                 send(0x0A);//播放第10个音频文件
 441   2                 send(0XEF);//指令结束位 
 442   2                     break;
 443   2          case 0X0B: send(0X7E);//指令开始位
 444   2                 send(0X04);//说明指令长度
 445   2                 send(0X42);//指定文件夹播放
 446   2                 send(0X01);//定位到名称为“01”的文件夹
 447   2                 send(0x0B);//播放第11个音频文件
 448   2                 send(0XEF);//指令结束位 
 449   2                     break;
 450   2            case 0X0C: send(0X7E);//指令开始位
 451   2                 send(0X04);//说明指令长度
 452   2                 send(0X42);//指定文件夹播放
 453   2                 send(0X01);//定位到名称为“01”的文件夹
 454   2                 send(0x0C);//播放第12个音频文件
 455   2                 send(0XEF);//指令结束位 
 456   2                     break;
 457   2          case 0X0D: send(0X7E);//指令开始位
 458   2                 send(0X04);//说明指令长度
 459   2                 send(0X42);//指定文件夹播放
 460   2                 send(0X01);//定位到名称为“01”的文件夹
 461   2                 send(0x0D);//播放第13个音频文件
 462   2                 send(0XEF);//指令结束位 
 463   2                     break;
 464   2          case 0X0E: send(0X7E);//指令开始位
 465   2                 send(0X04);//说明指令长度
 466   2                 send(0X42);//指定文件夹播放
 467   2                 send(0X01);//定位到名称为“01”的文件夹
 468   2                 send(0x0E);//播放第14个音频文件
 469   2                 send(0XEF);//指令结束位 
 470   2                     break;
 471   2            case 0X0F: send(0X7E);//指令开始位
 472   2                 send(0X04);//说明指令长度
 473   2                 send(0X42);//指定文件夹播放
 474   2                 send(0X01);//定位到名称为“01”的文件夹
 475   2                 send(0x0F);//播放第15个音频文件
 476   2                 send(0XEF);//指令结束位 
 477   2                     break;
 478   2      
 479   2          case 0X31: send(0X7E);//指令开始位
 480   2                 send(0X03);//说明指令长度
 481   2                 send(0X31);//设置音量
 482   2                 send(0X20);//20
 483   2                 send(0XEF);//指令结束位 
 484   2                     break;
 485   2          case 0X32: send(0X7E);//指令开始位
 486   2                 send(0X03);//说明指令长度
C51 COMPILER V9.55   MAIN                                                                  07/10/2016 14:50:34 PAGE 9   

 487   2                 send(0X31);//设置音量
 488   2                 send(0X10);//20
 489   2                 send(0XEF);//指令结束位 
 490   2                     break;
 491   2      
 492   2          case 0X33: send(0X7E);//指令开始位
 493   2                 send(0X03);//说明指令长度
 494   2                 send(0X33);//设置循环模式
 495   2                 send(0X04);//单曲播放
 496   2                 send(0XEF);//指令结束位 
 497   2                     break;
 498   2          
 499   2          case 0X34: send(0X7E);//指令开始位
 500   2                 send(0X03);//说明指令长度
 501   2                 send(0X33);//设置循环模式
 502   2                 send(0X02);//单曲循环！
 503   2                 send(0XEF);//指令结束位 
 504   2                     break;
 505   2          case 0X35: send(0X7E);//指令开始位
 506   2                 send(0X03);//说明指令长度
 507   2                 send(0X31);//设置音量
 508   2                 send(0X07);//20
 509   2                 send(0XEF);//指令结束位 
 510   2                     break;
 511   2          case 0X36: send(0X7E);//指令开始位
 512   2                 send(0X03);//说明指令长度
 513   2                 send(0X31);//设置音量
 514   2                 send(0X10);//20
 515   2                 send(0XEF);//指令结束位 
 516   2                     break;
 517   2          }
 518   1        
 519   1      }
 520          /*********************************************************/
 521          /*                                                       */
 522          /* MP3初始化                                             */
 523          /*                                                       */
 524          /*********************************************************/
 525          void mp3_init()
 526          {
 527   1        mp3(0x33);                 //设置循环模式为文件夹循环
 528   1        mp3(0x31);                 //设置音量为20
 529   1        //mp3(0x00);                 //开机播放
 530   1      
 531   1        /*不关闭串行中断的话一上电就会发送STOP，这样会影响曲名和播放歌曲的对应关系*/
 532   1        ES=0;            //串行中断禁止
 533   1        delay_ms(100);         //等待MP3准备好
 534   1        ES=1;
 535   1      }
 536          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1115    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
